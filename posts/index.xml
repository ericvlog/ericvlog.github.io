<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>All Posts - Eric vlog</title>
    <link>http://example.org/posts/</link>
    <description>All Posts | Eric vlog</description>
    <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 06 Oct 2024 16:47:33 &#43;0800</lastBuildDate><atom:link href="http://example.org/posts/" rel="self" type="application/rss+xml" /><item>
  <title>Postgresql Remove Data Tutorial</title>
  <link>http://example.org/posts/postgresql-remove-data.md/</link>
  <pubDate>Sun, 06 Oct 2024 16:47:33 &#43;0800</pubDate>
  <author>Eric</author>
  <guid>http://example.org/posts/postgresql-remove-data.md/</guid>
  <description><![CDATA[<h1 id="-identifying-your-tv-show-data-in-postgresql">🗂️ Identifying Your TV Show Data in PostgreSQL</h1>
<p>To locate the table where your TV show data is stored in PostgreSQL, follow these steps:</p>
<h2 id="step-1-list-all-tables-in-the-database-">Step 1: List All Tables in the Database 🗃️</h2>
<ol>
<li>
<p><strong>Access the PostgreSQL Prompt</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it riven-db psql -U postgres
</span></span></code></pre></div></li>
<li>
<p><strong>Connect to Your Database</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="err">\</span><span class="k">c</span><span class="w"> </span><span class="n">riven</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><strong>List All Tables</strong>:</p>
<p>Run the following command to view all tables in the current database:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="err">\</span><span class="n">dt</span><span class="w">
</span></span></span></code></pre></div><p>This will display a list of tables along with their schema, name, type, and owner.</p>
</li>
</ol>
<h2 id="step-2-examine-table-structure-">Step 2: Examine Table Structure 🔍</h2>
<p>Once you have a list of tables, examine the structure of each to find the relevant columns for your TV show data.</p>
<ol>
<li>
<p><strong>Describe a Table</strong>:</p>
<p>For example, to see the structure of the <code>tvshows</code> table:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="err">\</span><span class="n">d</span><span class="w"> </span><span class="n">tvshows</span><span class="w">
</span></span></span></code></pre></div><p>This command shows you the columns, their types, and any constraints (like primary keys).</p>
</li>
</ol>
<h2 id="step-3-look-for-relevant-columns-">Step 3: Look for Relevant Columns 🔑</h2>
<p>When describing a table, look for columns that might contain your TV show data. Common names include:</p>
<ul>
<li><code>title</code></li>
<li><code>name</code></li>
<li><code>show_name</code></li>
<li><code>description</code></li>
<li><code>genre</code></li>
</ul>
<h2 id="example-workflow-">Example Workflow 🛠️</h2>
<p>Here’s how the entire process might look:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Access the PostgreSQL prompt</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it riven-db psql -U postgres
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Connect to your database</span>
</span></span><span class="line"><span class="cl"><span class="se">\c</span> riven
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># List all tables</span>
</span></span><span class="line"><span class="cl"><span class="se">\d</span>t
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Describe the &#39;tvshows&#39; table to see its structure</span>
</span></span><span class="line"><span class="cl"><span class="se">\d</span> tvshows
</span></span></code></pre></div><h2 id="conclusion-">Conclusion 🏁</h2>
<p>By following these steps, you can identify which table holds your TV show data and what columns are available for querying or deleting. If you find a table that seems relevant but you&rsquo;re unsure, feel free to share its structure, and I can help you interpret it!</p>
<hr>
<h2 id="troubleshooting-command-errors-">Troubleshooting Command Errors ⚠️</h2>
<p>If you encounter issues with the command you entered, here’s how to resolve them:</p>
<h3 id="step-1-ensure-you-are-in-the-correct-environment-">Step 1: Ensure You Are in the Correct Environment ✅</h3>
<p>Make sure you are in the PostgreSQL command prompt (<code>psql</code>). A prompt like <code>riven=#</code> indicates you’re in the right place.</p>
<h3 id="step-2-execute-the-query-again-">Step 2: Execute the Query Again 🔄</h3>
<p>Try running the query again:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">_id</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;MediaItem&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">title</span><span class="w"> </span><span class="k">ILIKE</span><span class="w"> </span><span class="s1">&#39;%Isekai%&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h3 id="step-3-verify-the-output-">Step 3: Verify the Output 📊</h3>
<p>If the command executes successfully, it should return the <code>_id</code> of any media items that match the title. If there are no results, it will simply return an empty set.</p>
<hr>
<h2 id="checking-for-references-to-_id--3944-">Checking for References to <code>_id = 3944</code> 🔗</h2>
<p>You’ve successfully retrieved a list of tables referencing the <code>MediaItem</code> table. Here’s a summary:</p>
<table>
<thead>
<tr>
<th>Table Name</th>
<th>Column Name</th>
</tr>
</thead>
<tbody>
<tr>
<td>Movie</td>
<td>_id</td>
</tr>
<tr>
<td>Show</td>
<td>_id</td>
</tr>
<tr>
<td>StreamBlacklistRelation</td>
<td>media_item_id</td>
</tr>
<tr>
<td>StreamRelation</td>
<td>parent_id</td>
</tr>
<tr>
<td>Subtitle</td>
<td>parent_id</td>
</tr>
<tr>
<td>Season</td>
<td>_id</td>
</tr>
<tr>
<td>Episode</td>
<td>_id</td>
</tr>
</tbody>
</table>
<h3 id="step-1-query-each-table-for-_id--3944-">Step 1: Query Each Table for <code>_id = 3944</code> 🔍</h3>
<p>Run <code>SELECT</code> queries on each of these tables:</p>
<ol>
<li>
<p><strong>Movie</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Movie&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3944</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><strong>Show</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Show&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3944</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><strong>StreamBlacklistRelation</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;StreamBlacklistRelation&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">media_item_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3944</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><strong>StreamRelation</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;StreamRelation&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">parent_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3944</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><strong>Subtitle</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Subtitle&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">parent_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3944</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><strong>Season</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Season&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3944</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><strong>Episode</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Episode&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3944</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
</ol>
<h3 id="step-2-execute-queries-">Step 2: Execute Queries 🏃‍♂️</h3>
<p>Run these queries one by one in your PostgreSQL prompt to check for any records associated with <code>_id = 3944</code>.</p>
<h3 id="step-3-review-results-">Step 3: Review Results 📋</h3>
<ul>
<li>Check each output to see if there are related records.</li>
<li>If a table returns results, it indicates associations with the <code>MediaItem</code> having <code>_id = 3944</code>.</li>
</ul>
<hr>
<h2 id="deleting-shows-and-related-data-">Deleting Shows and Related Data 🗑️</h2>
<p>If you need to delete entries, follow these steps:</p>
<h3 id="step-1-check-related-seasons-">Step 1: Check Related Seasons 🔎</h3>
<p>First, identify which seasons reference this show:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Season&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">parent_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3944</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h3 id="step-2-delete-related-seasons-">Step 2: Delete Related Seasons ❌</h3>
<p>Once identified, delete those records:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DELETE</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Season&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">parent_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3944</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h3 id="step-3-delete-the-show-">Step 3: Delete the Show 🎬</h3>
<p>After deleting related seasons, you can delete the show itself:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DELETE</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Show&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3944</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h3 id="complete-workflow-">Complete Workflow 🔄</h3>
<ol>
<li>
<p><strong>Check for Related Seasons</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Season&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">parent_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3944</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><strong>Delete Related Seasons</strong> (if found):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DELETE</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Season&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">parent_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3944</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p><strong>Delete the Show</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DELETE</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Show&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3944</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div></li>
</ol>
<h3 id="important-considerations-">Important Considerations ⚠️</h3>
<ul>
<li><strong>Backup</strong>: Always ensure you have a backup before performing delete operations.</li>
<li><strong>Cascade Deletion</strong>: Consider setting the foreign key constraint in the <code>Season</code> table to <code>ON DELETE CASCADE</code> for future deletions.</li>
</ul>
<hr>
<p>Here’s a more compact version for easy copy and paste:</p>
<hr>
<h2 id="-docker-command-entering-postgresql">🐳 Docker Command entering postgresql.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it riven-db psql -U postgres
</span></span></code></pre></div><h2 id="-sql-queries">📜 SQL Queries</h2>
<h3 id="media-items-search">Media Items Search</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">_id</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;MediaItem&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">title</span><span class="w"> </span><span class="k">ILIKE</span><span class="w"> </span><span class="s1">&#39;%Ganbare Doukichan%&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;MediaItem&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">title</span><span class="w"> </span><span class="k">ILIKE</span><span class="w"> </span><span class="s1">&#39;%The Lord of the Rings: The Rings of Power%&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h3 id="check-parent-ids">Check Parent IDs</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="err">\</span><span class="n">d</span><span class="w"> </span><span class="s2">&#34;Episode&#34;</span><span class="w">
</span></span></span></code></pre></div><h2 id="-info-for-media-item-_id--1314">🔍 Info for Media Item <code>_id = 1314</code></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Movie&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1314</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;StreamBlacklistRelation&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">media_item_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1314</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;StreamRelation&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">parent_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1314</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Subtitle&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">parent_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1314</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Show&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1314</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Season&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">parent_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1314</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Season&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1314</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Episode&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">parent_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1314</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h2 id="-deleting-records">🗑️ Deleting Records</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DELETE</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Episode&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">parent_id</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">(</span><span class="k">SELECT</span><span class="w"> </span><span class="n">_id</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Season&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">parent_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">4156</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DELETE</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Season&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">parent_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">4156</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DELETE</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Show&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">4156</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DELETE</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Subtitle&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">parent_id</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">(</span><span class="k">SELECT</span><span class="w"> </span><span class="n">_id</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;Season&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">parent_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">4156</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DELETE</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;StreamRelation&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">parent_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">4156</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DELETE</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;StreamBlacklistRelation&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">media_item_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">4156</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DELETE</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;MediaItem&#34;</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">4156</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><hr>
<p>You can easily copy and paste this format! 😊</p>]]></description>
</item><item>
  <title>A Comprehensive Guide to SQLite: Installation, Checking, and Deleting Records</title>
  <link>http://example.org/posts/sqlite-comprehensive-guide.md/</link>
  <pubDate>Sat, 05 Oct 2024 22:22:29 &#43;0800</pubDate>
  <author>Eric</author>
  <guid>http://example.org/posts/sqlite-comprehensive-guide.md/</guid>
  <description><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"><span class="gh"># 📚 SQLite Guide: Installation, Checking, and Deleting Records
</span></span></span><span class="line"><span class="cl"><span class="gh"></span>
</span></span><span class="line"><span class="cl"><span class="gu">## 1. Install SQLite 🛠️
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>
</span></span><span class="line"><span class="cl">To get started with SQLite, you&#39;ll need to install it on your system. Follow these steps:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gu">### For Debian/Ubuntu:
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>
</span></span><span class="line"><span class="cl"><span class="k">1.</span> <span class="gs">**Open Terminal**</span> 🖥️
</span></span><span class="line"><span class="cl"><span class="k">2.</span> <span class="gs">**Update Package List**</span>:
</span></span><span class="line"><span class="cl">   ```bash
</span></span><span class="line"><span class="cl">   sudo apt update
</span></span></code></pre></div><ol start="3">
<li><strong>Install SQLite</strong>:
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt install sqlite3
</span></span></code></pre></div></li>
<li><strong>Verify Installation</strong> ✅:
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sqlite3 --version
</span></span></code></pre></div></li>
</ol>
<h2 id="2-open-your-database-">2. Open Your Database 📂</h2>
<p>Once SQLite is installed, you can open your database file:</p>
<ol>
<li><strong>Navigate to the Directory</strong>:
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> ~/appdata/arrr/jellyseerr/db
</span></span></code></pre></div></li>
<li><strong>Open SQLite with Your Database</strong>:
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sqlite3 db.sqlite3
</span></span></code></pre></div></li>
</ol>
<h2 id="3-check-for-existing-records-">3. Check for Existing Records 🔍</h2>
<p>Before deleting any records, it&rsquo;s good practice to check if they exist.</p>
<h3 id="run-the-following-query">Run the Following Query:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">media_request</span><span class="p">.</span><span class="n">id</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">media</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">LEFT</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">media_request</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">media</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">media_request</span><span class="p">.</span><span class="n">mediaId</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">media</span><span class="p">.</span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">5</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h3 id="interpreting-the-results">Interpreting the Results:</h3>
<ul>
<li>The output will show IDs of <code>media_request</code> records that are linked to media entries with a status of <code>5</code>.</li>
<li>Example Output:
<pre tabindex="0"><code>1
3
5
7
8
9
10
11
14
15
28
</code></pre></li>
</ul>
<h2 id="4-delete-records-">4. Delete Records 🗑️</h2>
<p>If you confirmed that records exist, you can proceed to delete them.</p>
<h3 id="run-the-following-query-1">Run the Following Query:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DELETE</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">media_request</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">SELECT</span><span class="w"> </span><span class="n">media_request</span><span class="p">.</span><span class="n">id</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">FROM</span><span class="w"> </span><span class="n">media</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">LEFT</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">media_request</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">media</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">media_request</span><span class="p">.</span><span class="n">mediaId</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">media</span><span class="p">.</span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><h2 id="5-confirm-deletion-">5. Confirm Deletion ✔️</h2>
<p>After deleting, it’s important to verify that the records have been removed.</p>
<h3 id="run-the-check-again">Run the Check Again:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">media_request</span><span class="p">.</span><span class="n">id</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">media</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">LEFT</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">media_request</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">media</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">media_request</span><span class="p">.</span><span class="n">mediaId</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">media</span><span class="p">.</span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">5</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><ul>
<li>If the result set is empty, the deletion was successful! 🎉</li>
</ul>
<h2 id="conclusion-">Conclusion 🎈</h2>
<p>You have successfully installed SQLite, checked for existing records, and deleted them as needed. If you have more questions or need further assistance, feel free to ask!</p>]]></description>
</item><item>
  <title>Docker Network Management Guide</title>
  <link>http://example.org/posts/docker-network-management-guide.md/</link>
  <pubDate>Fri, 27 Sep 2024 13:41:36 &#43;0800</pubDate>
  <author>Eric</author>
  <guid>http://example.org/posts/docker-network-management-guide.md/</guid>
  <description><![CDATA[Hello welcome to my blogs]]></description>
</item><item>
  <title>Adguard Home Dns on Debian Armbian</title>
  <link>http://example.org/posts/adguard-home-dns-on-debian-armbian/</link>
  <pubDate>Thu, 05 Sep 2024 20:27:24 &#43;0800</pubDate>
  <author>Eric</author>
  <guid>http://example.org/posts/adguard-home-dns-on-debian-armbian/</guid>
  <description><![CDATA[<h1 id="guide-to-change-dns-for-adguard-home-19216815-on-debianarmbian-and-apply-to-docker-">Guide to Change DNS for AdGuard Home (192.168.1.5) on Debian/Armbian and Apply to Docker 🐋</h1>
<h2 id="step-1-configure-adguard-home-dns-settings-">Step 1: Configure AdGuard Home DNS Settings 🌐</h2>
<ol>
<li>
<p><strong>Access AdGuard Home Dashboard:</strong></p>
<ul>
<li>Open a web browser and go to:<br>
<code>http://192.168.1.5:3000</code></li>
</ul>
</li>
<li>
<p><strong>Log in to your account.</strong></p>
</li>
<li>
<p><strong>Navigate to DNS Settings:</strong></p>
<ul>
<li>Go to <strong>Settings</strong> &gt; <strong>DNS settings</strong>.</li>
</ul>
</li>
<li>
<p><strong>Configure DNS Forwarding:</strong></p>
<ul>
<li>Add public DNS servers (if needed), e.g.,
<ul>
<li>Primary: <code>8.8.8.8</code> (Google)</li>
<li>Secondary: <code>1.1.1.1</code> (Cloudflare)</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Save your changes.</strong></p>
</li>
</ol>
<h2 id="step-2-change-dns-on-debianarmbian-">Step 2: Change DNS on Debian/Armbian 🖥️</h2>
<h3 id="method-1-edit-etcresolvconf">Method 1: Edit <code>/etc/resolv.conf</code></h3>
<ol>
<li><strong>Open Terminal.</strong></li>
<li><strong>Edit the resolv.conf file:</strong>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo nano /etc/resolv.conf
</span></span></code></pre></div></li>
<li><strong>Add the following line:</strong>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">nameserver 192.168.1.5
</span></span></code></pre></div></li>
<li><strong>Save and exit:</strong><br>
Press <code>CTRL + X</code>, then <code>Y</code>, and hit <code>Enter</code>.</li>
</ol>
<h3 id="method-2-using-etcnetworkinterfaces">Method 2: Using /etc/network/interfaces:</h3>
<h4 id="if-using-etcnetworkinterfaces">If using <code>/etc/network/interfaces</code>:</h4>
<ol>
<li><strong>Open Terminal.</strong></li>
<li><strong>Edit the interfaces file:</strong>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo nano /etc/network/interfaces
</span></span></code></pre></div></li>
<li><strong>Add or modify the DNS setting:</strong>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">dns-nameservers 192.168.1.5
</span></span></code></pre></div></li>
<li><strong>Save and exit.</strong></li>
<li><strong>Restart networking service:</strong>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo systemctl restart networking
</span></span></code></pre></div></li>
</ol>
<h2 id="step-3-configure-docker-to-use-adguard-home-dns-">Step 3: Configure Docker to Use AdGuard Home DNS 🐳</h2>
<ol>
<li>
<p><strong>Edit Docker daemon configuration:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo nano /etc/docker/daemon.json
</span></span></code></pre></div></li>
<li>
<p><strong>Add or modify the following line if you have changed the Docker default folder before:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;data-root&#34;</span><span class="p">:</span> <span class="s2">&#34;/mnt/docker&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;dns&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;192.168.1.5&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ul>
<li>Make sure to include the <code>&quot;dns&quot;</code> setting if you want to configure DNS as well.</li>
<li>The <code>&quot;data-root&quot;: &quot;/mnt/docker&quot;</code> specifies the location where you changed the Docker data directory.</li>
</ul>
</li>
<li>
<p><strong>Save and exit:</strong><br>
Press <code>CTRL + X</code>, then <code>Y</code>, and hit <code>Enter</code>.</p>
<p>If docker have</p>
</li>
<li>
<p><strong>Restart Docker:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo systemctl restart docker
</span></span></code></pre></div></li>
</ol>
<h2 id="step-4-verify-dns-settings-in-docker-containers-">Step 4: Verify DNS Settings in Docker Containers ✅</h2>
<ol>
<li><strong>Run a test container:</strong>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run --rm busybox nslookup google.com
</span></span></code></pre></div></li>
<li><strong>Check the output:</strong><br>
Ensure it shows <code>192.168.1.5</code> as the DNS server.</li>
</ol>
<h2 id="conclusion-">Conclusion 🎉</h2>
<p>You have successfully changed the DNS settings for AdGuard Home and applied them to your Debian/Armbian system and Docker! Now enjoy enhanced ad-blocking and DNS filtering!</p>]]></description>
</item><item>
  <title>Guide to Moving the Default /var/lib/docker to Another Directory on Linux</title>
  <link>http://example.org/posts/relocating-the-docker-root-directory/</link>
  <pubDate>Wed, 21 Aug 2024 13:55:50 &#43;0800</pubDate>
  <author>Eric</author>
  <guid>http://example.org/posts/relocating-the-docker-root-directory/</guid>
  <description><![CDATA[📦 Guide to Moving the Default /var/lib/docker to Another Directory on Linux 1. 🚫 Stop the Docker Service First, stop the Docker service:
sudo systemctl stop docker If you see a warning like this:
Warning: Stopping docker.service, but it can still be activated by: docker.socket Then stop the Docker socket as well:
sudo systemctl stop docker.socket To ensure that the Docker daemon is completely stopped, you can run:
docker ps -a If the command does not return any running containers, the daemon is stopped.]]></description>
</item><item>
  <title>Speeding Up Docker Image Pulls with Multiple Registry Mirrors</title>
  <link>http://example.org/posts/speeding-up-docker/</link>
  <pubDate>Thu, 06 Jun 2024 00:39:01 &#43;0800</pubDate>
  <author>Eric</author>
  <guid>http://example.org/posts/speeding-up-docker/</guid>
  <description><![CDATA[<h1 id="-speeding-up-docker-image-pulls-with-multiple-registry-mirrors">🚀 Speeding Up Docker Image Pulls with Multiple Registry Mirrors</h1>
<p>Docker image pulls can sometimes be slow due to network issues or high demand on the Docker Hub. One effective way to speed up these pulls is by using multiple registry mirrors. This tutorial will guide you through the process of configuring Docker to use multiple registry mirrors.</p>
<h2 id="-prerequisites">🛠️ Prerequisites</h2>
<ul>
<li>A running Docker installation on your system.</li>
<li>Sudo privileges to edit Docker configuration files.</li>
</ul>
<h2 id="-step-by-step-guide">📄 Step-by-Step Guide</h2>
<h3 id="1-open-the-docker-daemon-configuration-file">1. Open the Docker Daemon Configuration File</h3>
<p>First, you need to open the Docker daemon configuration file. This file is typically located at <code>/etc/docker/daemon.json</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo nano /etc/docker/daemon.json
</span></span></code></pre></div><h3 id="2-add-multiple-registry-mirrors">2. Add Multiple Registry Mirrors</h3>
<p>If the file is empty, you can start by adding the basic JSON structure. Here’s an example configuration with multiple registry mirrors:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;registry-mirrors&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;https://mirror.gcr.io&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;https://registry-1.docker.io&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;https://mirror.aliyuncs.com&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;dns&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;8.8.8.8&#34;</span><span class="p">,</span> <span class="s2">&#34;8.8.4.4&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;max-concurrent-downloads&#34;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;log-driver&#34;</span><span class="p">:</span> <span class="s2">&#34;json-file&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;log-opts&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;max-size&#34;</span><span class="p">:</span> <span class="s2">&#34;10m&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;max-file&#34;</span><span class="p">:</span> <span class="s2">&#34;3&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="explanation">Explanation:</h4>
<ul>
<li><strong><code>registry-mirrors</code></strong>: Lists the registry mirrors Docker will use. Docker will try each mirror in the order listed until it finds one that works.</li>
<li><strong><code>dns</code></strong>: Sets custom DNS servers for Docker containers.</li>
<li><strong><code>max-concurrent-downloads</code></strong>: Limits the number of concurrent downloads to improve performance.</li>
<li><strong><code>log-driver</code></strong>: Sets the logging driver (e.g., <code>json-file</code>).</li>
<li><strong><code>log-opts</code></strong>: Configures options for the logging driver, such as maximum log size and the number of log files to retain.</li>
</ul>
<h3 id="3-save-the-configuration-file">3. Save the Configuration File</h3>
<p>After adding the configuration, save the file and exit the editor.</p>
<ul>
<li>Press <code>Ctrl + O</code> to save the changes.</li>
<li>Press <code>Enter</code> to confirm the file name.</li>
<li>Press <code>Ctrl + X</code> to exit the nano editor.</li>
</ul>
<h3 id="4-restart-docker">4. Restart Docker</h3>
<p>To apply the changes, you need to restart the Docker service.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo systemctl restart docker
</span></span></code></pre></div><h3 id="5-verify-the-configuration">5. Verify the Configuration</h3>
<p>You can verify that the configuration has been applied by running:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker info
</span></span></code></pre></div><p>Check the output to ensure that the registry mirrors are listed under the <code>Registry Mirrors</code> section.</p>
<h2 id="-conclusion">✅ Conclusion</h2>
<p>By adding multiple registry mirrors, you can significantly improve the speed and reliability of Docker image pulls. This is especially useful in environments with varying network conditions or high demand on the Docker Hub.</p>]]></description>
</item><item>
  <title>How to Drop Databases in Redis, MongoDB, and PostgreSQL</title>
  <link>http://example.org/posts/redis-mongo-database/</link>
  <pubDate>Tue, 04 Jun 2024 16:57:31 &#43;0800</pubDate>
  <author>Eric</author>
  <guid>http://example.org/posts/redis-mongo-database/</guid>
  <description><![CDATA[How to Drop Databases in Redis, MongoDB, and PostgreSQL with list out all user and database]]></description>
</item><item>
  <title>Install rsshub ,freshrss and ttrss in Debian</title>
  <link>http://example.org/posts/rsshub-ttrss-freshrss/</link>
  <pubDate>Fri, 31 May 2024 13:55:50 &#43;0800</pubDate>
  <author>Eric</author>
  <guid>http://example.org/posts/rsshub-ttrss-freshrss/</guid>
  <description><![CDATA[<h2 id="compose-with-rsshub-freshrss-container">Compose with rsshub, freshrss container.</h2>
<h3 id="1-rsshub--freshrss">1. rsshub + freshrss</h3>]]></description>
</item><item>
  <title>Rclone Automount on Linux</title>
  <link>http://example.org/posts/rclone-automount-linux/</link>
  <pubDate>Mon, 20 May 2024 09:24:50 &#43;0800</pubDate>
  <author>Eric</author>
  <guid>http://example.org/posts/rclone-automount-linux/</guid>
  <description><![CDATA[Automatically Mounting rclone Remote Directory on Debian 11 (pikpak) To automatically mount the remote directory using rclone on system restart in Debian 11, you can create a systemd service unit. Here&rsquo;s how you can do it:
Create a systemd service unit file: Open a terminal and create a new service unit file using your favorite text editor. For example:
sudo nano /etc/systemd/system/rclone-mount.service Add the following content to the file:
[Unit] Description=RClone Mount Service After=network-online.]]></description>
</item><item>
  <title>Hugo Blog on GitHub guide</title>
  <link>http://example.org/posts/hugo-blog-guide/</link>
  <pubDate>Sat, 18 May 2024 18:06:04 &#43;0800</pubDate>
  <author>Eric</author>
  <guid>http://example.org/posts/hugo-blog-guide/</guid>
  <description><![CDATA[<h1 id="creating-a-blog-with-hugo-and-github-pages-on-windows-">Creating a Blog with Hugo and GitHub Pages on Windows 📝💻</h1>
<p>I created this blog using Hugo and GitHub Pages on Windows. Hugo is a static site generator that is very fast and written in Go language. GitHub Pages lets you host the static sites created using Hugo.</p>
<h2 id="installing-hugo-">Installing Hugo 🚀</h2>
<p>First, install Hugo on Windows. I used the Chocolatey package manager to install Hugo. There are two versions available, and I installed the extended version as it is required if you plan to customize the themes you will be using.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">choco install hugo-extended -y
</span></span></code></pre></div><p>After installation, check the Hugo version to confirm if it was installed successfully.</p>
<h2 id="git-repositories-and-folder-structure-">Git Repositories and Folder Structure 📂</h2>
<p>Now that we have installed Hugo, let&rsquo;s create our blog. Let&rsquo;s discuss the Git repositories and folder structure. I will create two Git repositories:</p>
<ol>
<li><strong>Development repository</strong> - This will contain all the Hugo files and the posts I create in Markdown.</li>
<li><strong>GitHub Pages repository</strong> - This will contain the output of Hugo, which will be the static sites for my blog.</li>
</ol>
<p>Since I have two Git repositories, I will have two folders for the same. First, I will create a folder <code>blog</code> where the two folders will be. Inside the <code>blog</code> folder, use Hugo to create a new site <code>jsjblog</code>. The <code>jsjblog</code> folder will be linked to the Git development repository. Then the output of Hugo, which will be static sites, will be stored in the <code>jsjblog_site</code> folder which I created in later steps.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir blog
</span></span><span class="line"><span class="cl">hugo new site jsjblog
</span></span></code></pre></div><p>If you go inside the <code>jsjblog</code> folder, you will find all the Hugo setup files.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">archetypes
</span></span><span class="line"><span class="cl">content
</span></span><span class="line"><span class="cl">data
</span></span><span class="line"><span class="cl">layouts
</span></span><span class="line"><span class="cl">resources
</span></span><span class="line"><span class="cl">static
</span></span><span class="line"><span class="cl">themes
</span></span><span class="line"><span class="cl">config.toml
</span></span></code></pre></div><h2 id="hugo-theme-and-configtoml-file-">Hugo Theme and <code>config.toml</code> File 🎨</h2>
<p>The <code>themes</code> folder contains all the website design details. There are many custom Hugo themes available. I have decided to use the Even theme for my blog. I will download the theme from Git instead of using <code>git clone</code> as I don’t want any other Git links in my development repository. After downloading and unzipping the theme, I pasted the contents inside the <code>themes/even</code> folder. As mentioned on the Even theme page, I copied the <code>config.toml</code> file from examples to the <code>jsjblog</code> folder and replaced the existing file. Now let&rsquo;s check our website using the command below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">hugo server
</span></span></code></pre></div><p>You can see the site by going to <code>http://localhost:1313/</code> as mentioned in the terminal message. Since it&rsquo;s an example website, the title, name, etc., need to be changed. These all can be changed in the <code>config.toml</code> file under <code>jsjblog</code>. After editing the <code>config.toml</code> file, once you run the Hugo server again, you see the updated website with your details.</p>
<p>We can also edit the themes as required. As mentioned on the Even theme page, we can do many customizations to our website. I did a simple color change inside <code>themes/even/assets/sass/_variable.scss</code>. Saved the change and now you see the color change on the website.</p>
<h2 id="create-new-blog-post-">Create New Blog Post 📝</h2>
<p>Since there are no posts in the blog, let&rsquo;s add a new blog post. As mentioned on the Even theme page, we can create a new post using the command below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">hugo new post/initial_post.md
</span></span></code></pre></div><p>Note that <code>post</code> or <code>posts</code> in the command will vary based on the theme you are using.</p>
<p>Open <code>initial_post</code> from <code>jsjblog/content/post</code> and start writing the post. At the start of the post, there will be some metadata which Hugo populates automatically. Hugo needs this metadata for creating the static sites. <code>Draft</code> in the metadata should be set to <code>false</code> once we have completed the post and are ready to publish. If it’s true, Hugo will not show the post on the website. You can add other metadata like tags, category, author, etc. These all will depend upon the type of theme you use. After creating our first post, let&rsquo;s run the Hugo server again. We can see our post on the site.</p>
<h2 id="git-repositories-and-going-online-">Git Repositories and Going Online 🌐</h2>
<p>Now our development of the site with our first post is completed. Let&rsquo;s create the Git repository for blog development. I created a <code>jsjblog</code> Git repository without a README file. Then I linked the <code>jsjblog</code> folder to this Git repository using the commands below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;# jsjblog&#34;</span> &gt;&gt; README.md
</span></span><span class="line"><span class="cl">git init
</span></span><span class="line"><span class="cl">git add README.md
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;first commit&#34;</span>
</span></span><span class="line"><span class="cl">git branch -M main
</span></span><span class="line"><span class="cl">git remote add origin https://github.com/jithusjacob/jsjblog.git
</span></span><span class="line"><span class="cl">git push -u origin main
</span></span></code></pre></div><p><strong>Attention</strong>: Use <code>git status</code> to check, then:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git add --all
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;changelog&#34;</span>
</span></span><span class="line"><span class="cl">git push
</span></span></code></pre></div><p>Above, instead of adding only <code>README.md</code>, I actually added all the files in the <code>jsjblog</code> folder using the command below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git add --all
</span></span></code></pre></div><p>So our development setup is saved in GitHub. As and when a new post is created, you can move the same to this GitHub repository.</p>
<p>Now we will create the Git repository for GitHub Pages. While creating this repository, we need to ensure the repository name has the format <code>username.github.io</code> where <code>username</code> is your Git username. Here, I created the repository without a README file. Next, we will create the Hugo output folder which will have the static sites and will be linked to this repository. We can use the <code>hugo</code> command to build the output files and they will be created inside the <code>jsjblog</code> folder under a new folder called <code>public</code>. But since I want to separate the <code>jsjblog</code> folder and the output folder so that it’s easier to maintain different Git repositories, I will use the <code>-d</code> flag to give the destination of the output files.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">hugo -d ../jsjblog_site
</span></span></code></pre></div><p>I gave the output folder as <code>jsjblog_site</code> inside the <code>blog</code> folder. So now the <code>blog</code> folder will have two folders corresponding to the two GitHub repositories.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">jsjblog
</span></span><span class="line"><span class="cl">jsjblog_site
</span></span></code></pre></div><p>Let&rsquo;s link the <code>jsjblog_site</code> folder with the GitHub Pages repository so that we can finally see our blog online.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;# jithusjacob.github.io&#34;</span> &gt;&gt; README.md
</span></span><span class="line"><span class="cl">git init
</span></span><span class="line"><span class="cl">git add README.md
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;first commit&#34;</span>
</span></span><span class="line"><span class="cl">git branch -M main
</span></span><span class="line"><span class="cl">git remote add origin https://github.com/jithusjacob/jithusjacob.github.io.git
</span></span></code></pre></div><p><strong>Attention</strong>: Use <code>git status</code> to check, then:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git add --all
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;changelog&#34;</span>
</span></span><span class="line"><span class="cl">git push
</span></span></code></pre></div><p>This time I did not do <code>git add .</code> as I was getting some errors. I followed the above steps, linked the Git repository to the folder, then added remaining files and moved them to the Git repository.</p>
<p>So now my Hugo blog is ready to be accessed on <a
  href="https://jithusjacob.github.io/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreffer"
  
  
  
  
>https://jithusjacob.github.io/</a></p>
<p>You can also see the above steps in my YouTube video. 📹</p>]]></description>
</item></channel>
</rss>
